name: Publish Crate
on:
  release:
    types: [published]

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Generate Package Version
        shell: pwsh
        run: |
          $VERSION="$('${{ github.event.release.tag_name }}'.substring(1))"
          Add-Content -Path $env:GITHUB_ENV -Value "VERSION=$VERSION"
          Write-Host $VERSION

      - name: Set Package Version
        run: sed -i "s/^version\s*=\s*\".*\"/version = \"$VERSION\"/g" Cargo.toml

      - name: Stash Versioned Cargo.toml
        uses: actions/upload-artifact@v4
        with:
          name: cargofile
          path: Cargo.toml

  test:
    name: Test
    runs-on: ubuntu-20.04
    needs:
      - prepare
    steps:
      - name: Get Rust Stable
        id: rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: Swatinem/rust-cache@v2

      - name: Check out code
        uses: actions/checkout@v4

      - name: Fetch Versioned Cargo.toml
        uses: actions/download-artifact@v4.1.9
        with:
          name: cargofile

      - name: Run tests
        uses: actions-rs/cargo@v1.0.3
        with:
          command: test

  publish-cargo:
    name: Publish to Cargo
    runs-on: ubuntu-20.04
    needs:
      - prepare
      - test
    steps:
      - name: Get Rust Stable
        id: rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: Swatinem/rust-cache@v2

      - name: Check out code
        uses: actions/checkout@v4

      - name: Fetch Versioned Cargo.toml
        uses: actions/download-artifact@v4.1.9
        with:
          name: cargofile

      - name: Login to Cargo
        run: |
          cargo login ${CRATES_IO_TOKEN}
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

      - name: Publish to Cargo
        run: cargo publish --allow-dirty
